
function complex_fir_core_config(this_block)

  % Revision History:
  %
  %   14-Oct-2014  (12:39 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/jack/work/ami_correlator/ami/ami_correlator/complex_fir_core.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('complex_fir_core');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;
  this_block.addSimulinkInport('sync');

  this_block.addSimulinkInport('i0');
  this_block.addSimulinkInport('i1');
  this_block.addSimulinkInport('i2');
  this_block.addSimulinkInport('i3');
  this_block.addSimulinkInport('i4');
  this_block.addSimulinkInport('i5');
  this_block.addSimulinkInport('i6');
  this_block.addSimulinkInport('i7');
  this_block.addSimulinkInport('i8');
  this_block.addSimulinkInport('i9');
  this_block.addSimulinkInport('i10');
  this_block.addSimulinkInport('i11');
  this_block.addSimulinkInport('i12');
  this_block.addSimulinkInport('i13');
  this_block.addSimulinkInport('i14');
  this_block.addSimulinkInport('i15');
  
  this_block.addSimulinkInport('q0');
  this_block.addSimulinkInport('q1');
  this_block.addSimulinkInport('q2');
  this_block.addSimulinkInport('q3');
  this_block.addSimulinkInport('q4');
  this_block.addSimulinkInport('q5');
  this_block.addSimulinkInport('q6');
  this_block.addSimulinkInport('q7');
  this_block.addSimulinkInport('q8');
  this_block.addSimulinkInport('q9');
  this_block.addSimulinkInport('q10');
  this_block.addSimulinkInport('q11');
  this_block.addSimulinkInport('q12');
  this_block.addSimulinkInport('q13');
  this_block.addSimulinkInport('q14');
  this_block.addSimulinkInport('q15');
  
  this_block.addSimulinkOutport('sync_out');

  this_block.addSimulinkOutport('iout_0i');
  this_block.addSimulinkOutport('iout_1i');
  this_block.addSimulinkOutport('iout_2i');
  this_block.addSimulinkOutport('iout_3i');
  this_block.addSimulinkOutport('iout_4i');
  this_block.addSimulinkOutport('iout_5i');
  this_block.addSimulinkOutport('iout_6i');
  this_block.addSimulinkOutport('iout_7i');
  this_block.addSimulinkOutport('iout_8i');
  this_block.addSimulinkOutport('iout_9i');
  this_block.addSimulinkOutport('iout_10i');
  this_block.addSimulinkOutport('iout_11i');
  this_block.addSimulinkOutport('iout_12i');
  this_block.addSimulinkOutport('iout_13i');
  this_block.addSimulinkOutport('iout_14i');
  this_block.addSimulinkOutport('iout_15i');
  
  this_block.addSimulinkOutport('qout_0i');
  
  this_block.addSimulinkOutport('qout_1i');
  this_block.addSimulinkOutport('qout_2i');
  this_block.addSimulinkOutport('qout_3i');
  this_block.addSimulinkOutport('qout_4i');
  this_block.addSimulinkOutport('qout_5i');
  this_block.addSimulinkOutport('qout_6i');
  this_block.addSimulinkOutport('qout_7i');
  this_block.addSimulinkOutport('qout_8i');
  this_block.addSimulinkOutport('qout_9i');
  this_block.addSimulinkOutport('qout_10i');
  this_block.addSimulinkOutport('qout_11i');
  this_block.addSimulinkOutport('qout_12i');
  this_block.addSimulinkOutport('qout_13i');
  this_block.addSimulinkOutport('qout_14i');
  this_block.addSimulinkOutport('qout_15i');
  


  iout_0i_port = this_block.port('iout_0i');
  iout_0i_port.setType('UFix_18_0');
  iout_10i_port = this_block.port('iout_10i');
  iout_10i_port.setType('UFix_18_0');
  iout_11i_port = this_block.port('iout_11i');
  iout_11i_port.setType('UFix_18_0');
  iout_12i_port = this_block.port('iout_12i');
  iout_12i_port.setType('UFix_18_0');
  iout_13i_port = this_block.port('iout_13i');
  iout_13i_port.setType('UFix_18_0');
  iout_14i_port = this_block.port('iout_14i');
  iout_14i_port.setType('UFix_18_0');
  iout_15i_port = this_block.port('iout_15i');
  iout_15i_port.setType('UFix_18_0');
  iout_1i_port = this_block.port('iout_1i');
  iout_1i_port.setType('UFix_18_0');
  iout_2i_port = this_block.port('iout_2i');
  iout_2i_port.setType('UFix_18_0');
  iout_3i_port = this_block.port('iout_3i');
  iout_3i_port.setType('UFix_18_0');
  iout_4i_port = this_block.port('iout_4i');
  iout_4i_port.setType('UFix_18_0');
  iout_5i_port = this_block.port('iout_5i');
  iout_5i_port.setType('UFix_18_0');
  iout_6i_port = this_block.port('iout_6i');
  iout_6i_port.setType('UFix_18_0');
  iout_7i_port = this_block.port('iout_7i');
  iout_7i_port.setType('UFix_18_0');
  iout_8i_port = this_block.port('iout_8i');
  iout_8i_port.setType('UFix_18_0');
  iout_9i_port = this_block.port('iout_9i');
  iout_9i_port.setType('UFix_18_0');
  qout_0i_port = this_block.port('qout_0i');
  qout_0i_port.setType('UFix_18_0');
  qout_10i_port = this_block.port('qout_10i');
  qout_10i_port.setType('UFix_18_0');
  qout_11i_port = this_block.port('qout_11i');
  qout_11i_port.setType('UFix_18_0');
  qout_12i_port = this_block.port('qout_12i');
  qout_12i_port.setType('UFix_18_0');
  qout_13i_port = this_block.port('qout_13i');
  qout_13i_port.setType('UFix_18_0');
  qout_14i_port = this_block.port('qout_14i');
  qout_14i_port.setType('UFix_18_0');
  qout_15i_port = this_block.port('qout_15i');
  qout_15i_port.setType('UFix_18_0');
  qout_1i_port = this_block.port('qout_1i');
  qout_1i_port.setType('UFix_18_0');
  qout_2i_port = this_block.port('qout_2i');
  qout_2i_port.setType('UFix_18_0');
  qout_3i_port = this_block.port('qout_3i');
  qout_3i_port.setType('UFix_18_0');
  qout_4i_port = this_block.port('qout_4i');
  qout_4i_port.setType('UFix_18_0');
  qout_5i_port = this_block.port('qout_5i');
  qout_5i_port.setType('UFix_18_0');
  qout_6i_port = this_block.port('qout_6i');
  qout_6i_port.setType('UFix_18_0');
  qout_7i_port = this_block.port('qout_7i');
  qout_7i_port.setType('UFix_18_0');
  qout_8i_port = this_block.port('qout_8i');
  qout_8i_port.setType('UFix_18_0');
  qout_9i_port = this_block.port('qout_9i');
  qout_9i_port.setType('UFix_18_0');
  sync_out_port = this_block.port('sync_out');
  sync_out_port.setType('Bool');
  sync_out_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('i0').width ~= 8);
      this_block.setError('Input data type for port "i0" must have width=8.');
    end

    if (this_block.port('i1').width ~= 8);
      this_block.setError('Input data type for port "i1" must have width=8.');
    end

    if (this_block.port('i10').width ~= 8);
      this_block.setError('Input data type for port "i10" must have width=8.');
    end

    if (this_block.port('i11').width ~= 8);
      this_block.setError('Input data type for port "i11" must have width=8.');
    end

    if (this_block.port('i12').width ~= 8);
      this_block.setError('Input data type for port "i12" must have width=8.');
    end

    if (this_block.port('i13').width ~= 8);
      this_block.setError('Input data type for port "i13" must have width=8.');
    end

    if (this_block.port('i14').width ~= 8);
      this_block.setError('Input data type for port "i14" must have width=8.');
    end

    if (this_block.port('i15').width ~= 8);
      this_block.setError('Input data type for port "i15" must have width=8.');
    end

    if (this_block.port('i2').width ~= 8);
      this_block.setError('Input data type for port "i2" must have width=8.');
    end

    if (this_block.port('i3').width ~= 8);
      this_block.setError('Input data type for port "i3" must have width=8.');
    end

    if (this_block.port('i4').width ~= 8);
      this_block.setError('Input data type for port "i4" must have width=8.');
    end

    if (this_block.port('i5').width ~= 8);
      this_block.setError('Input data type for port "i5" must have width=8.');
    end

    if (this_block.port('i6').width ~= 8);
      this_block.setError('Input data type for port "i6" must have width=8.');
    end

    if (this_block.port('i7').width ~= 8);
      this_block.setError('Input data type for port "i7" must have width=8.');
    end

    if (this_block.port('i8').width ~= 8);
      this_block.setError('Input data type for port "i8" must have width=8.');
    end

    if (this_block.port('i9').width ~= 8);
      this_block.setError('Input data type for port "i9" must have width=8.');
    end

    if (this_block.port('q0').width ~= 8);
      this_block.setError('Input data type for port "q0" must have width=8.');
    end

    if (this_block.port('q1').width ~= 8);
      this_block.setError('Input data type for port "q1" must have width=8.');
    end

    if (this_block.port('q10').width ~= 8);
      this_block.setError('Input data type for port "q10" must have width=8.');
    end

    if (this_block.port('q11').width ~= 8);
      this_block.setError('Input data type for port "q11" must have width=8.');
    end

    if (this_block.port('q12').width ~= 8);
      this_block.setError('Input data type for port "q12" must have width=8.');
    end

    if (this_block.port('q13').width ~= 8);
      this_block.setError('Input data type for port "q13" must have width=8.');
    end

    if (this_block.port('q14').width ~= 8);
      this_block.setError('Input data type for port "q14" must have width=8.');
    end

    if (this_block.port('q15').width ~= 8);
      this_block.setError('Input data type for port "q15" must have width=8.');
    end

    if (this_block.port('q2').width ~= 8);
      this_block.setError('Input data type for port "q2" must have width=8.');
    end

    if (this_block.port('q3').width ~= 8);
      this_block.setError('Input data type for port "q3" must have width=8.');
    end

    if (this_block.port('q4').width ~= 8);
      this_block.setError('Input data type for port "q4" must have width=8.');
    end

    if (this_block.port('q5').width ~= 8);
      this_block.setError('Input data type for port "q5" must have width=8.');
    end

    if (this_block.port('q6').width ~= 8);
      this_block.setError('Input data type for port "q6" must have width=8.');
    end

    if (this_block.port('q7').width ~= 8);
      this_block.setError('Input data type for port "q7" must have width=8.');
    end

    if (this_block.port('q8').width ~= 8);
      this_block.setError('Input data type for port "q8" must have width=8.');
    end

    if (this_block.port('q9').width ~= 8);
      this_block.setError('Input data type for port "q9" must have width=8.');
    end

    if (this_block.port('sync').width ~= 1);
      this_block.setError('Input data type for port "sync" must have width=1.');
    end

    this_block.port('sync').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk_1','ce_1')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('complex_fir_core.vhd');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

