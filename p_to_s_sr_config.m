
function p_to_s_sr_config(this_block)

  % Revision History:
  %
  %   11-Nov-2013  (14:16 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /media/data/jack/ami/ami_correlator/verilog/p_to_s_sr.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('p_to_s_sr');
  
  myname = this_block.blockName
  parent_block = get_param(myname, 'Parent')
  n_slices = get_param(parent_block, 'n_slices')
  slice_width = get_param(parent_block, 'slice_width')

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;

  this_block.addSimulinkInport('din');
  this_block.addSimulinkInport('load');

  this_block.addSimulinkOutport('dout');
  this_block.addSimulinkOutport('vld');

  vld_port = this_block.port('vld');
  vld_port.setType('Bool');
  vld_port.useHDLVector(false);
  
  dout_port = this_block.port('dout');
  dout_port.setType(['UFix_',num2str(slice_width),'_0']);
  dout_port.useHDLVector(true);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    % (!) Port 'din' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

  % (!) Port 'dout' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('N_SLICES','integer',num2str(n_slices));
  this_block.addGeneric('SLICE_SIZE','integer',num2str(slice_width));

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('verilog/p_to_s_sr.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

