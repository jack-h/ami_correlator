
function qdr_vacc_ctrl_config_test(this_block)

  % Revision History:
  %
  %   23-Mar-2014  (15:22 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/jack/github/jack-h/mlib_devel/ox_library/hdl_lib/vacc/qdr_vacc_ctrl.v
  %
  %
  
  myname = this_block.blockName;
  parent = get_param(myname, 'Parent'); %The parent block which has the mask
  QDR_LATENCY = str2num(get_param(parent, 'qdr_latency'));
  ADD_LATENCY = str2num(get_param(parent, 'add_latency'));
  VEC_LEN = eval_param(parent, 'vec_len');
  VEC_LEN_BITS = ceil(log2(VEC_LEN+1));
  ACC_BITS = 16;
  RB_BURST_BITS = 16;
  
  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('qdr_vacc_ctrl');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('rst');
  this_block.addSimulinkInport('rb_burst_len_mi');
  this_block.addSimulinkInport('vld');
  this_block.addSimulinkInport('sync');
  this_block.addSimulinkInport('acc_len_mi');


  this_block.addSimulinkOutport('qdr_re');
  this_block.addSimulinkOutport('qdr_we');
  this_block.addSimulinkOutport('qdr_addr');
  this_block.addSimulinkOutport('dout_vld');
  this_block.addSimulinkOutport('first_vec');

  dout_vld_port = this_block.port('dout_vld');
  dout_vld_port.setType('Bool');
  dout_vld_port.useHDLVector(false);
  first_vec_port = this_block.port('first_vec');
  first_vec_port.setType('Bool');
  first_vec_port.useHDLVector(false);
  qdr_we_port = this_block.port('qdr_we');
  qdr_we_port.setType('Bool');
  qdr_we_port.useHDLVector(false);
  qdr_re_port = this_block.port('qdr_re');
  qdr_re_port.setType('Bool');
  qdr_re_port.useHDLVector(false);
  qdr_addr_port = this_block.port('qdr_addr');
  qdr_addr_port.setType(['UFix_' num2str(VEC_LEN_BITS) '_0']);
  qdr_addr_port.useHDLVector(true);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('rst').width ~= 1);
      this_block.setError('Input data type for port "rst" must have width=1.');
    end

    this_block.port('rst').useHDLVector(false);

    % (!) Port 'rb_burst_len_mi' appeared to have dynamic type in the HDL -- please add type checking as appropriate;

    if (this_block.port('vld').width ~= 1);
      this_block.setError('Input data type for port "vld" must have width=1.');
    end

    this_block.port('vld').useHDLVector(false);

    if (this_block.port('sync').width ~= 1);
      this_block.setError('Input data type for port "sync" must have width=1.');
    end

    this_block.port('sync').useHDLVector(false);

    % (!) Port 'acc_len_mi' appeared to have dynamic type in the HDL -- please add type checking as appropriate;
    if (this_block.port('acc_len_mi').width ~= ACC_BITS);
      this_block.setError(['Input data type for port "acc_len_mi" must have width=' num2str(ACC_BITS)]);
    end
    
    this_block.port('acc_len_mi').useHDLVector(true);
    
    % (!) Port 'acc_len_mi' appeared to have dynamic type in the HDL -- please add type checking as appropriate;
    if (this_block.port('rb_burst_len_mi').width ~= RB_BURST_BITS);
      this_block.setError(['Input data type for port "rb_burst_len_mi" must have width=' num2str(RB_BURST_BITS)]);
    end
    
    this_block.port('rb_burst_len_mi').useHDLVector(true);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('QDR_LATENCY','integer',num2str(QDR_LATENCY));
  this_block.addGeneric('ADD_LATENCY','integer',num2str(ADD_LATENCY));
  this_block.addGeneric('VEC_LEN','integer',num2str(VEC_LEN));
  this_block.addGeneric('VEC_LEN_BITS','integer',num2str(VEC_LEN_BITS));
  this_block.addGeneric('ACC_BITS','integer',num2str(ACC_BITS));
  this_block.addGeneric('RB_BURST_BITS','integer',num2str(RB_BURST_BITS));

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('/home/jack/github/jack-h/mlib_devel/ox_library/hdl_lib/general_lib/delay.v');
  this_block.addFile('/home/jack/github/jack-h/mlib_devel/ox_library/hdl_lib/general_lib/sync_delay.v');
  this_block.addFile('/home/jack/github/jack-h/mlib_devel/ox_library/hdl_lib/vacc/qdr_vacc_ctrl.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

